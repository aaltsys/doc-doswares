.. _exports:

#############################
DOS WARES Export Mapper
#############################

DOS WARES is capable of writing flat-file and structured exports of individual 
records, selected record cursors, and entire tables (files), using the mapper 
at menu selection :menuselection:`eXchange --> Export-Import --> Exports`.

Three recent improvements to the WARES export mapping capability include:

*  creating export files by transaction using WARES record keys, 
*  creating transaction export files automatically using database triggers, and
*  the ability to write transactions in JSON format.

Each of these new capabilities is documented following.

Transaction Exports
=============================

When the :guilabel:`Export FileName` entry on an export map is left blank, 
selected records will be exported into individual files named by the WARES 
record key. A separate folder or directory should be used for each WARES file 
which is exported, and file system paths should conform to the 8-character 
naming limitations of DOS. Similarly, only the left-most 8 characters of a 
record key will be used as a filename during the export.

Due to the similarity of Report and Process functionality in WARES, transaction 
export commands may be executed as report forms, callable from the report group 
popups within windows and from menus. This allows records to be exported 
selectively as a step in data entry.

Database Trigger Exports
=============================

A new export program has been added to be called from the file posting controls. 
Program :program:`POST_EXPORTDATA` uses the data mapper and definition records 
as previously mentioned, but will perform exports automatically based on file 
system actions. Implement an automatic transaction export as follows.

#. At :menuselection:`Tools --> Define --> Controls` enter a control 
   :guilabel:`Type` of :kbd:`POST` and enter a WARES filename such as 
   :file:`SHIPMENTS` in the :guilabel:`Identifier`. The current posting 
   control will display.
#. Select a location for the export call, and press :kbd:`<Ctrl-N>` to enter a 
   new line. Use the program name :program:`POST_EXPORTDATA`, and an export
   control identifier in the :guilabel:`Branch` column. 
#. Fill in the :guilabel:`Test`, :guilabel:`Value`, and :guilabel:`Occur` 
   entries to determine the rule or condition which will trigger the export.
   For example, *Test=GT*, *Value=1*, *Occur=Always* will write posted 
   transactions and update the exported file with each change.

JSON Formatting
=============================

JSON encoding is enabled by control header settings for delimiters and 
preprocess, and special control and value entries in the export map details. 

Export map heading settings
-----------------------------

The following table lists recommended settings for JSON in the export
map heading fields. 

+--------------+-----------+------------------+
| Entry        | JSON      | Char             |
+==============+===========+==================+
| Delim Table  | (blank)   |                  |
+--------------+-----------+------------------+
| Delim Row    | (blank)   |                  |
+--------------+-----------+------------------+
| Delim Column | 0A        | \\n (NL)         |
+--------------+-----------+------------------+
| Delim Value  | 3A20      | : (colon/space)  |
+--------------+-----------+------------------+
| Delim Quote  | 22        | " (quote)        |
+--------------+-----------+------------------+
| Preprocess   | JSON,32,2 | 32=space, 9=tab  |
+--------------+-----------+------------------+

.. note::
   Delimiters show characters by hex value, but the preprocess JSON command
   requires the white-space character value to be expressed in decimal instead.

Export map detail entries
-----------------------------

There are just seven entry patterns for a JSON encoding. Three of these produce 
opening or closing brackets "[]" and braces "{}", and two more patterns provide
labeled brace and bracket lines. The remaining two lines are the standard data 
lines for static values or data values, but with name labels in the Heading 
column.

+---------+---------+-------+--------+---------+--------+-----------------------------+
| Heading | Control | Value | Field  | Command | Format | Result                      |
+=========+=========+=======+========+=========+========+=============================+
| (blank) | JSON    | {     |         (blank)           | { ; \\n ; indent +=         |
+---------+---------+-------+--------+---------+--------+-----------------------------+
| label   | JSON    | {     |         (blank)           | "label": { ; \\n, indent += |
+---------+---------+-------+--------+---------+--------+-----------------------------+
| label   | JSON    | [     |         (blank)           | "label": [ ; \\n, indent += |
+---------+---------+-------+--------+---------+--------+-----------------------------+
| label   |         | value |         (blank)           | "label": "value", \\n, ","  |
+---------+---------+-------+--------+---------+--------+-----------------------------+
| label   |         |       | name   | command |        | "label": "@ANS", \\n, ","   |
+---------+---------+-------+--------+---------+--------+-----------------------------+
|         | JSON    | ]     |         (blank)           | ], ; indent -=              |
+---------+---------+-------+--------+---------+--------+-----------------------------+
|         | JSON    | }     |         (blank)           | }, ; indent -=              |
+---------+---------+-------+--------+---------+--------+-----------------------------+

Character representations
-----------------------------

The following characters will be escaped with preceding back-slashes when 
embedded in JSON data:

+------+------------------+---------+------+
| Char | Description      | Hex     | Dec  |
+======+==================+=========+======+
| \\   | reverse solidus  | \\5C\\  |  92  |
+------+------------------+---------+------+
| \/   | solidus (slash)  | \\2F\\  |  47  |
+------+------------------+---------+------+
| \"   | quotation mark   | \\22\\  |  34  |
+------+------------------+---------+------+
| \\b  | backspace        | \\7F\\  | 127  |
+------+------------------+---------+------+
| \\f  | form feed        | \\0B\\  |  11  |
+------+------------------+---------+------+
| \\n  | new line         | \\0A\\  |  10  |
+------+------------------+---------+------+
| \\r  | carriage return  | \\0D\\  |  13  |
+------+------------------+---------+------+
| \\t  | horizontal tab   | \\09\\  |   9  |
+------+------------------+---------+------+

JSON format description
-----------------------------

JSON describes a data set with unordered lists of descriptor/value pairs 
enclosed in braces ({}), and ordered arrays of descriptor/value pairs enclosed 
in brackets ([]). For readability, nested groups of elements are indicated by
indentation using white space (spaces). Documentation of JSON standards is 
available at http://json.org/. An example portion of a shipment record is shown
following:

.. code-block:: JSON

   {
     "references": [
       {
         "referenceCode": "CO", 
         "reference": "5343463643"
       },
       {
         "referenceCode": "PO", 
         "reference": "INV450470452"
       },
     ],
   }

